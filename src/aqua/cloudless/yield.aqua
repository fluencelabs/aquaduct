aqua Cloudless_Yield declares *

import Worker from "@fluencelabs/aqua-lib/subnet.aqua"
import Promise, Error from "../promise"
import pushAll from "../utils"
import Logger from "../logger"

alias WorkerYield: Worker -> ?Error
alias Yield: *Worker, *Error, WorkerYield -> Promise

--
-- Strategies for Cloudless Functions
--

-- Wait for K replies, no matter the quality of replies, success/err
func wait_for{Logger}(success: u8, error: u8) -> Yield:
  wait = func (ws: *Worker, err: *Error, cb: Worker -> ?Error) -> Promise:
    yield = func () -> ?Error:
      ok: *bool
      Logger.log(["YIELD IS CALLED!!!!!!!!!!!!!!!!!!!!"])

      -- I hope that it will not canonicalize ws, need to check
      for w <- ws rec:
        Logger.log(["YIELD", "Got a worker", w])
        e <- cb(w)
        Logger.log(["YIELD", "Errors are", e])
        if e == nil:
          ok <<- true
        else:  
          pushAll(err, cb(w))

      -- TODO not absolutely correct:
      -- ignores errors that happen BEFORE we can reach workers
      -- but they might be fatal
      join ok[success-1]
      par join err[error-1]

      Logger.log(["YIELD", "Joined"])

      new_error: *Error
      if err.length >= error:
        pushAll(new_error, err)

      <- new_error
    <- Promise(yield = yield)
  <- wait