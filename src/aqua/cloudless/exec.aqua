aqua Cloudless_Exec declares *

import optOr from "../utils"
import Logger from "../logger"
import Function, DealId from "core" 
import Error, Promise from "../promise"
use done from "../promise" as Promise

-- Request, response roundtrip
func roundtrip{Function, Logger}(dealId: DealId, yieldOnHost: ?string) -> []Error:
  host <- optOr(yieldOnHost, HOST_PEER_ID)

  on host:
    -- Function.run must begin on a peer that is a host
    job <- Function.run(dealId)
    Logger.log(["roundtrip", "Got a job for deal id", dealId])
    promise <- job.run(Promise.done())

    -- Should move
    err <- promise.yield()

  <- err

-- Fire a request, no topology hops back to init peer should happen
func fireAndForget{Function}(dealId: DealId):
  run = func ():
    on HOST_PEER_ID:
      job <- Function.run(dealId)
      job.run(Promise.done())
  co run()  