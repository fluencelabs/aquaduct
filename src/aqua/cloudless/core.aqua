aqua Cloudless.Core declares *

import Error, Promise, timeout from "../promise"
import Job, j_timeout from "../job"
-- use timeout from "job" as Job

alias DealId : string

-- Cloudless Function runs Compute on a single Subnet â€“ with the given execution policy
ability Function:
  run(dealId: DealId, prev: Promise) -> Promise

-- Should be a function in Function
func run_job{Function}(dealId: DealId) -> Job:
  run = (prev: Promise) -> Promise:
    <- Function.run(dealId, prev)
  <- Job(run)  

--
-- DECORATORS
--

-- Function times out and errors after ms
-- Checked on yield phase
-- TODO should be just timeout, but imports work poorly
func ct_timeout{Function}(waitForMs: u64, errorMessage: Error) -> Function:
  run = func(dealId: DealId, prev: Promise) -> Promise:
    j <- Function.run(dealId, prev)
    <- timeout{j}(waitForMs, errorMessage)

  <- Function(run = run)